pipeline {
    agent any
    tools {
        nodejs 'nodejs'
    }
    environment {
        containerRegistry = "f90mora/devops-test"
        GITHUB_REPO= "https://github.com/fer9003/devsu-devops-test.git"
        DATABASE_NAME = credentials('db_name')
        DATABASE_USER = credentials('db_user')
        DATABASE_PASSWORD = credentials('db_pass')
    }
stages {
    stage('Github Clone') {
        steps {
            echo "Cloning Project from Github"
            checkout scmGit(
                branches: [[name: '*/master']],
                extensions: [],
                userRemoteConfigs: [[url: GITHUB_REPO ]]
            )
        }
    }

    stage('Unit Test') {
        steps {
            sh """
            cd microservice
            npm install && npm test
            """
        }
    }

    stage('Static Code Analysis') {
        environment {
            scannerHome = tool 'sonarqube-scanner' /* global-config */
        }

            steps {
                withSonarQubeEnv('sonarqube') { /* configuration server */
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=microservice \
                    -Dsonar.projectName=microservice \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=microservice/ '''
                }
            }
        }

    stage('Container Image Scan') {
        steps {
            parallel (
                "Container Image Scan": {
                    sh '''
                        cd microservice/
                        bash trivy-container-scan.sh
                    '''
                },
                "OPA Dockerfile": {
                    sh '''
                        docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-docker-sec.rego microservice/Dockerfile 
                    '''
                }
            )
        }
    }

    stage('Docker Build and Push') {
        when {
            expression {
                BRANCH_NAME == "master"
            }
        }
        steps {
            withDockerRegistry([credentialsId: "dockerhub", url:""]) {
                sh """
                cd microservice/
                docker build -t $containerRegistry:""$GIT_COMMIT"" .
                docker push $containerRegistry:""$GIT_COMMIT""
                """
            }
        }
    }
}
}